"""Init table

Revision ID: d3cc108dce35
Revises: 
Create Date: 2023-07-07 16:16:43.557972

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "d3cc108dce35"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "role",
        sa.Column("role_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "role_name", sa.VARCHAR(length=128), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("role_id", name="role_pkey"),
    )
    op.create_table(
        "users",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('users_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("login", sa.VARCHAR(length=128), autoincrement=False, nullable=True),
        sa.Column(
            "last_name", sa.VARCHAR(length=64), autoincrement=False, nullable=True
        ),
        sa.Column(
            "first_name", sa.VARCHAR(length=64), autoincrement=False, nullable=True
        ),
        sa.Column(
            "second_name", sa.VARCHAR(length=64), autoincrement=False, nullable=True
        ),
        sa.Column("snils", sa.VARCHAR(length=12), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "changed_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="users_pkey"),
        sa.UniqueConstraint("login", name="users_login_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "users_to_role",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("users_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("role_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "changed_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["role_id"], ["role.role_id"], name="users_to_role_role_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["users_id"], ["users.id"], name="users_to_role_users_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="users_to_role_pkey"),
    )
    op.create_table(
        "lpus",
        sa.Column("id", sa.VARCHAR(length=32), autoincrement=False, nullable=False),
        sa.Column(
            "lpu_name", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column("ogrn", sa.VARCHAR(length=16), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="lpus_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "lpus_to_mo",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("lpu_id", sa.VARCHAR(length=32), autoincrement=False, nullable=False),
        sa.Column("mo_id", sa.VARCHAR(length=32), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "changed_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["lpu_id"], ["lpus.id"], name="lpus_to_mo_lpu_id_fkey"),
        sa.ForeignKeyConstraint(["mo_id"], ["lpus.id"], name="lpus_to_mo_mo_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="lpus_to_mo_pkey"),
    )

    op.create_table(
        "specialities",
        sa.Column(
            "spec_code",
            sa.INTEGER(),
            server_default=sa.text("nextval('specialities_spec_code_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "spec_name", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("spec_code", name="specialities_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "users_additional_info",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("phone", sa.VARCHAR(length=64), autoincrement=False, nullable=True),
        sa.Column("email", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column("region", sa.VARCHAR(length=128), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="users_additional_info_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="users_additional_info_pkey"),
    )
    op.create_table(
        "users_to_specialisation",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("users_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("spec_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "changed_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["spec_id"],
            ["specialities.spec_code"],
            name="users_to_specialisation_spec_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["users_id"], ["users.id"], name="users_to_specialisation_users_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="users_to_specialisation_pkey"),
    )
    op.create_table(
        "users_to_lpu",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("users_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("lpu_id", sa.VARCHAR(length=32), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "changed_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["lpu_id"], ["lpus.id"], name="users_to_lpu_lpu_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["users_id"], ["users.id"], name="users_to_lpu_users_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="users_to_lpu_pkey"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("users_to_lpu")
    op.drop_table("users_to_specialisation")
    op.drop_table("users_additional_info")
    op.drop_table("specialities")
    op.drop_table("users_to_role")
    op.drop_table("role")
    op.drop_table("users")
    op.drop_table("lpus_to_mo")
    op.drop_table("lpus")
    # ### end Alembic commands ###
